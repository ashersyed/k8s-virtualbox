# 2.1 install docker and its dependent components.

---
- hosts: all
  become: true
  vars:
    nfs_mounts:
      - {  path: "/mnt/shared", src: "{{ nfs_server_ip }}:/mnt/shared" }

  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Install docker and its dependecies
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    notify:
      - docker status

  - name: Add vagrant user to docker group
    user:
      name: vagrant
      group: docker

# 2.2 kubelet will not start if the system has swap enabled, so we are disabling swap

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

# 2.3 installing kubelet, kubeadm and kubectl

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

# 2.3a: initialize kubernetes cluster

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans='192.168.50.10'  --node-name k8s-master --pod-network-cidr=10.244.0.0/16

# 2.4: setup the kube config file for the vagrant user to access the Kubernetes cluster

  - name: Setup kubeconfig for vagrant user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/vagrant/.kube
     - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
     - chown vagrant:vagrant /home/vagrant/.kube/config

# 2.5: setup the container networking provider and the network policy engine

  - name: Install pod network operator
    become: false
    command: kubectl create -f https://docs.projectcalico.org/manifests/calico.yaml
    # command: kubectl create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

  # - name: Install tigera operator
  #   become: false
  #   command: kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml

  # - name: Install calico custom resource definition
  #   become: false
  #   command: kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml

  # - name: Remove the taints on the master so that you can schedule pods on it
  #   become: false
  #   command: kubectl taint nodes --all node-role.kubernetes.io/master-    

# 2.6: Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named join-command

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
    become: false

# 2.6.A add nfs client packages

  - name: Ensure NFS common is installed.
    apt: 
      name: nfs-common
      state: present
      update_cache: yes

  - name: Create mountable dir
    file: 
      path: /mnt/shared
      state: directory 
      mode: 777 
      owner: root 
      group: root

  - name: mount the nfsshare in client side
    mount:
      fstype: nfs
      opts: defaults
      dump: "0"
      passno: "0"
      state: mounted
      src: "{{item.src}}"
      path: "{{item.path}}"
    with_items: "{{nfs_mounts}}"

# 2.7: Setup a handler for checking Docker daemon

  handlers:
    - name: docker status
      service: name=docker state=started
